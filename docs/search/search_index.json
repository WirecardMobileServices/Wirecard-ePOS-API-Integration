{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Wirecard ePOS Wirecard ePOS is a unique cashier system developed by the team of 33 developers, testers and business analysts. Wirecard ePOS combines smart cash-register, product catalogue and payment acceptance into one solution. Wirecard ePOS solution can be utilized in following ways: Wirecard ePOS API - for retailers who prefer direct API (backend-to-backend) integration Wirecard ePOS SDK - for retailers who want to develop their own iOS or Android application Wirecard ePOS App - for retailers who prefer easy to use iOS or Android application Wirecard ePOS API Integration Guide If you wish to integrate via Wirecard ePOS API, please follow this integration guide. Wirecard ePOS SDK Integration Guide If you wish to integrate via Wirecard ePOS SDK, please follow the integration guide available at Wirecard ePOS SDK . Wirecard ePOS Application If you wish to benefit from Wirecard ePOS App, please download it at Apple App Store or Google Play Store . Tip Wirecard ePOS belongs to Wirecard portfolio of point of sale (POS) solutions. For complete information about all Wirecard products and solutions, please contact your Wirecard representative. If you don't know your Wirecard representative, please contact us at retail.mpos@wirecard.com","title":"Welcome"},{"location":"#welcome-to-wirecard-epos","text":"Wirecard ePOS is a unique cashier system developed by the team of 33 developers, testers and business analysts. Wirecard ePOS combines smart cash-register, product catalogue and payment acceptance into one solution. Wirecard ePOS solution can be utilized in following ways: Wirecard ePOS API - for retailers who prefer direct API (backend-to-backend) integration Wirecard ePOS SDK - for retailers who want to develop their own iOS or Android application Wirecard ePOS App - for retailers who prefer easy to use iOS or Android application Wirecard ePOS API Integration Guide If you wish to integrate via Wirecard ePOS API, please follow this integration guide. Wirecard ePOS SDK Integration Guide If you wish to integrate via Wirecard ePOS SDK, please follow the integration guide available at Wirecard ePOS SDK . Wirecard ePOS Application If you wish to benefit from Wirecard ePOS App, please download it at Apple App Store or Google Play Store . Tip Wirecard ePOS belongs to Wirecard portfolio of point of sale (POS) solutions. For complete information about all Wirecard products and solutions, please contact your Wirecard representative. If you don't know your Wirecard representative, please contact us at retail.mpos@wirecard.com","title":"Welcome to Wirecard ePOS"},{"location":"advanced_overview/","text":"","title":"Overview"},{"location":"alipay/","text":"","title":"Alipay"},{"location":"card/","text":"","title":"Terminal management"},{"location":"cash/","text":"","title":"Cash"},{"location":"core_overview/","text":"","title":"Overview"},{"location":"discounts/","text":"","title":"Discounts"},{"location":"getting-started/","text":"This chapter provides all information you need to know in order to start your integration right away. Authentication and Security First of all, you need to have Wirecard ePOS API credentials (username & password) in order to successfully authenticate with Wirecard ePOS API. At the moment, only basic access authentication is supported. Tip Please contact your Wirecard representative to obtain your personal credentials. If you don't know your Wirecard representative, please contact us at retail.mpos@wirecard.com Note In the context of an HTTP transaction, basic access authentication is a method for an HTTP user agent (e.g. a web browser) to provide a username and password when making a request. In basic HTTP authentication, a request contains a header field of the form Authorization: Basic , where credentials is the base64 encoding of id and password joined by a colon. HTTP Basic authentication (BA) implementation is the simplest technique for enforcing access controls to web resources because it does not require cookies, session identifiers, or login pages; rather, HTTP Basic authentication uses standard fields in the HTTP header, removing the need for handshakes. The BA mechanism provides no confidentiality protection for the transmitted credentials. They are merely encoded with Base64 in transit, but not encrypted or hashed in any way. Therefore, Basic Authentication is typically used in conjunction with HTTPS to provide confidentiality. When the user agent wants to send authentication credentials to the server, it may use the Authorization field. The Authorization field is constructed as follows: The username and password are combined with a single colon (:). This means that the username itself cannot contain a colon. The resulting string is encoded into an octet sequence. The character set to use for this encoding is by default unspecified, as long as it is compatible with US-ASCII, but the server may suggest use of UTF-8 by sending the charset parameter. The resulting string is encoded using a variant of Base64. The authorization method and a space (e.g. \"Basic \") is then prepended to the encoded string. For example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the base64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. Then the Authorization header will appear as: \u201cAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\u201d See Wikipedia for more details. Testing Environment Wirecard ePOS API TEST environment is provided to API integrators for their development purposes. In case your credentials are valid for ePOS TEST environment, please refer to the following URL: https://switch-test.wirecard.com/mswitch-server/ You can test your credentials with this API request: GET https://switch-test.wirecard.com/mswitch-server/v1/info/version","title":"Getting Started"},{"location":"getting-started/#authentication-and-security","text":"First of all, you need to have Wirecard ePOS API credentials (username & password) in order to successfully authenticate with Wirecard ePOS API. At the moment, only basic access authentication is supported. Tip Please contact your Wirecard representative to obtain your personal credentials. If you don't know your Wirecard representative, please contact us at retail.mpos@wirecard.com Note In the context of an HTTP transaction, basic access authentication is a method for an HTTP user agent (e.g. a web browser) to provide a username and password when making a request. In basic HTTP authentication, a request contains a header field of the form Authorization: Basic , where credentials is the base64 encoding of id and password joined by a colon. HTTP Basic authentication (BA) implementation is the simplest technique for enforcing access controls to web resources because it does not require cookies, session identifiers, or login pages; rather, HTTP Basic authentication uses standard fields in the HTTP header, removing the need for handshakes. The BA mechanism provides no confidentiality protection for the transmitted credentials. They are merely encoded with Base64 in transit, but not encrypted or hashed in any way. Therefore, Basic Authentication is typically used in conjunction with HTTPS to provide confidentiality. When the user agent wants to send authentication credentials to the server, it may use the Authorization field. The Authorization field is constructed as follows: The username and password are combined with a single colon (:). This means that the username itself cannot contain a colon. The resulting string is encoded into an octet sequence. The character set to use for this encoding is by default unspecified, as long as it is compatible with US-ASCII, but the server may suggest use of UTF-8 by sending the charset parameter. The resulting string is encoded using a variant of Base64. The authorization method and a space (e.g. \"Basic \") is then prepended to the encoded string. For example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the base64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. Then the Authorization header will appear as: \u201cAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\u201d See Wikipedia for more details.","title":"Authentication and Security"},{"location":"getting-started/#testing-environment","text":"Wirecard ePOS API TEST environment is provided to API integrators for their development purposes. In case your credentials are valid for ePOS TEST environment, please refer to the following URL: https://switch-test.wirecard.com/mswitch-server/ You can test your credentials with this API request: GET https://switch-test.wirecard.com/mswitch-server/v1/info/version","title":"Testing Environment"},{"location":"glossary/","text":"Acronyms ePOS mPOS POS Terminology A Acquirer B Backend system I Issuer M Merchant P Partner Payment service provider Payment transaction Purchase R Return S Sale T Transaction U User","title":"Glossary"},{"location":"glossary/#acronyms","text":"ePOS mPOS POS","title":"Acronyms"},{"location":"glossary/#terminology","text":"","title":"Terminology"},{"location":"glossary/#a","text":"Acquirer","title":"A"},{"location":"glossary/#b","text":"Backend system","title":"B"},{"location":"glossary/#i","text":"Issuer","title":"I"},{"location":"glossary/#m","text":"Merchant","title":"M"},{"location":"glossary/#p","text":"Partner Payment service provider Payment transaction Purchase","title":"P"},{"location":"glossary/#r","text":"Return","title":"R"},{"location":"glossary/#s","text":"Sale","title":"S"},{"location":"glossary/#t","text":"Transaction","title":"T"},{"location":"glossary/#u","text":"User","title":"U"},{"location":"introduction/","text":"Welcome to Wirecard ePOS API Integration Guide Purpose of this integration guide is to provide step by step instructions on how to integrate to Wirecard ePOS solution via REST API. Note Payment acceptance functionality is usually a subset of a larger solution. Throughout this guide we therefore refer to the functionality you create via Wirecard ePOS API as the payment acceptance functionality, even though it may not be a standalone system. Who is this for? For organizations (we call them partners) who want to utilize Wirecard ePOS API in order to enhance their solution with payment acceptance functionality. Merchants are the actual end-users of the payment acceptance functionality. Tip If you are new to the payment industry there are a lot of terms to learn. So, the terms partner, merchant, user, payment acceptance application and many others are all defined in Glossary to help you with this task. Glossary has also definitions for the most common acronyms you find in this integration guide, such as Purchase, Return, Payment transaction and others. How much is covered? Our goal is to provide as much information as needed to successfully create a payment acceptance solution in the shortest possible time. Core Integration covers core functionality which has to be integrated. Advanced Integration covers value added functionality which is not mandatory. How technical is it? Partner team typically consists of a non-technical or semi-technical project manager and one or more developers who are technical. This guide is for the whole team so the information here ranges from non-technical to technical. What do I need to know? Following skills are required: understanding of REST API calls understanding of JSON objects","title":"Introduction"},{"location":"introduction/#welcome-to-wirecard-epos-api-integration-guide","text":"Purpose of this integration guide is to provide step by step instructions on how to integrate to Wirecard ePOS solution via REST API. Note Payment acceptance functionality is usually a subset of a larger solution. Throughout this guide we therefore refer to the functionality you create via Wirecard ePOS API as the payment acceptance functionality, even though it may not be a standalone system.","title":"Welcome to Wirecard ePOS API Integration Guide"},{"location":"introduction/#who-is-this-for","text":"For organizations (we call them partners) who want to utilize Wirecard ePOS API in order to enhance their solution with payment acceptance functionality. Merchants are the actual end-users of the payment acceptance functionality. Tip If you are new to the payment industry there are a lot of terms to learn. So, the terms partner, merchant, user, payment acceptance application and many others are all defined in Glossary to help you with this task. Glossary has also definitions for the most common acronyms you find in this integration guide, such as Purchase, Return, Payment transaction and others.","title":"Who is this for?"},{"location":"introduction/#how-much-is-covered","text":"Our goal is to provide as much information as needed to successfully create a payment acceptance solution in the shortest possible time. Core Integration covers core functionality which has to be integrated. Advanced Integration covers value added functionality which is not mandatory.","title":"How much is covered?"},{"location":"introduction/#how-technical-is-it","text":"Partner team typically consists of a non-technical or semi-technical project manager and one or more developers who are technical. This guide is for the whole team so the information here ranges from non-technical to technical.","title":"How technical is it?"},{"location":"introduction/#what-do-i-need-to-know","text":"Following skills are required: understanding of REST API calls understanding of JSON objects","title":"What do I need to know?"},{"location":"items/","text":"","title":"General"},{"location":"sale-general/","text":"","title":"General"},{"location":"shift_reports/","text":"","title":"Shift Report"},{"location":"user/","text":"User management Purpose of this chapter is to describe how can merchant manage its own users. User account is required as the whole communication with ePOS system is done via particular user account. ePOS backend API calls used for managing user accounts are described below: 1. Create a new user POST /v1/users with the example body: { \"username\": \"john.doe\", \"email\": \"john.doe@example.com\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"merchant\": { \"id\": \"e5869bc0303b4dabbf1e593d619146dc\" }, \"password\": \"Password123!\", \"roles\": [ \"MERCHANT_ADMIN\" ], \"status\": \"ENABLED\", \"timeZone\": \"Europe/Berlin\" } User role defines what operations (API calls) are available to a particular user account. Wirecard ePOS backend provides following user roles: - Merchant Admin - see all merchant sales and can create new user accounts - Merchant Advanced User - see all merchant sales - Merchant User - see only own sales 2. List all user accounts GET /v1/users 3. Get a specific user account GET /v1/users/{userId}","title":"User Management"},{"location":"user/#user-management","text":"Purpose of this chapter is to describe how can merchant manage its own users. User account is required as the whole communication with ePOS system is done via particular user account. ePOS backend API calls used for managing user accounts are described below:","title":"User management"},{"location":"user/#1-create-a-new-user","text":"POST /v1/users with the example body: { \"username\": \"john.doe\", \"email\": \"john.doe@example.com\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"merchant\": { \"id\": \"e5869bc0303b4dabbf1e593d619146dc\" }, \"password\": \"Password123!\", \"roles\": [ \"MERCHANT_ADMIN\" ], \"status\": \"ENABLED\", \"timeZone\": \"Europe/Berlin\" } User role defines what operations (API calls) are available to a particular user account. Wirecard ePOS backend provides following user roles: - Merchant Admin - see all merchant sales and can create new user accounts - Merchant Advanced User - see all merchant sales - Merchant User - see only own sales","title":"1. Create a new user"},{"location":"user/#2-list-all-user-accounts","text":"GET /v1/users","title":"2. List all user accounts"},{"location":"user/#3-get-a-specific-user-account","text":"GET /v1/users/{userId}","title":"3. Get a specific user account"},{"location":"wechat/","text":"","title":"WeChat"}]}