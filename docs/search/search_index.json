{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ePOS ePOS is a unique Cashier system developed by the team of 33 developers, testers and business analysts, that enables SMEs to combine smart cash register with catalogue and payment acceptance into one, flexible solution. ePOS is available as standalone application or SDK for iOS and Android, or as a direct backend-to-backend integration for larger merchants. Backend to backend integration guide Purpose of this guide is to provide step by step instructions on how to integrate to ePOS using REST API. This method is most suitable for backend to backend integration. If you wish to integrate through mobile devices, please follow guid on this link SDK integration.","title":"Welcome"},{"location":"#welcome-to-epos","text":"ePOS is a unique Cashier system developed by the team of 33 developers, testers and business analysts, that enables SMEs to combine smart cash register with catalogue and payment acceptance into one, flexible solution. ePOS is available as standalone application or SDK for iOS and Android, or as a direct backend-to-backend integration for larger merchants.","title":"Welcome to ePOS"},{"location":"#backend-to-backend-integration-guide","text":"Purpose of this guide is to provide step by step instructions on how to integrate to ePOS using REST API. This method is most suitable for backend to backend integration. If you wish to integrate through mobile devices, please follow guid on this link SDK integration.","title":"Backend to backend integration guide"},{"location":"alipay/","text":"","title":"AliPay"},{"location":"auth/","text":"Authentication and security To contact ePOS backend, first you need to properly authenticate against the system. To do that, you need to have first account created by your Wirecard representative. If you don't have representative, please contact us at retail.mpos@wirecard.com In ePOS we use basic authentication, when making a request. In the context of an HTTP transaction, basic access authentication is a method for an HTTP user agent (e.g. a web browser, curl, ...) to provide a user name and password when making a request. In basic HTTP authentication, a request contains a header field of the form Authorization: Basic , where credentials is the base64 encoding of id and password joined by a colon. HTTP Basic authentication (BA) implementation is the simplest technique for enforcing access controls to web resources because it does not require cookies, session identifiers, or login pages; rather, HTTP Basic authentication uses standard fields in the HTTP header, removing the need for handshakes. The BA mechanism provides no confidentiality protection for the transmitted credentials. They are merely encoded with Base64 in transit, but not encrypted or hashed in any way. Therefore, Basic Authentication is typically used in conjunction with HTTPS to provide confidentiality. When the user agent wants to send authentication credentials to the server, it may use the Authorization field. The Authorization field is constructed as follows: - The username and password are combined with a single colon (:). This means that the username itself cannot contain a colon. The resulting string is encoded into an octet sequence. The character set to use for this encoding is by default unspecified, as long as it is compatible with US-ASCII, but the server may suggest use of UTF-8 by sending the charset parameter. The resulting string is encoded using a variant of Base64. The authorization method and a space (e.g. \"Basic \") is then prepended to the encoded string. For example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the base64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. Then the Authorization header will appear as: \u201cAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\u201d Example of CURL request: - curl -X GET \" https://switch.wirecard.com/mswitch-server/v1/info/version \" -H \"accept: application/json\" -H \"Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\" - curl -X GET \" https://switch.wirecard.com/mswitch-server/v1/info/version \" -H \"accept: application/json\" -u Aladdin:OpenSesame Test Environment Wirecard ePOS backend TEST environment is provided to API integrators for their development purposes. In case your credentials are valid for ePOS backend TEST environment, please refer to https://switch-test.wirecard.com/mswitch-server/ One can test the validity of credentials by calling: GET https://switch-test.wirecard.com/mswitch-server/v1/info/version","title":"Security"},{"location":"auth/#authentication-and-security","text":"To contact ePOS backend, first you need to properly authenticate against the system. To do that, you need to have first account created by your Wirecard representative. If you don't have representative, please contact us at retail.mpos@wirecard.com In ePOS we use basic authentication, when making a request. In the context of an HTTP transaction, basic access authentication is a method for an HTTP user agent (e.g. a web browser, curl, ...) to provide a user name and password when making a request. In basic HTTP authentication, a request contains a header field of the form Authorization: Basic , where credentials is the base64 encoding of id and password joined by a colon. HTTP Basic authentication (BA) implementation is the simplest technique for enforcing access controls to web resources because it does not require cookies, session identifiers, or login pages; rather, HTTP Basic authentication uses standard fields in the HTTP header, removing the need for handshakes. The BA mechanism provides no confidentiality protection for the transmitted credentials. They are merely encoded with Base64 in transit, but not encrypted or hashed in any way. Therefore, Basic Authentication is typically used in conjunction with HTTPS to provide confidentiality. When the user agent wants to send authentication credentials to the server, it may use the Authorization field. The Authorization field is constructed as follows: - The username and password are combined with a single colon (:). This means that the username itself cannot contain a colon. The resulting string is encoded into an octet sequence. The character set to use for this encoding is by default unspecified, as long as it is compatible with US-ASCII, but the server may suggest use of UTF-8 by sending the charset parameter. The resulting string is encoded using a variant of Base64. The authorization method and a space (e.g. \"Basic \") is then prepended to the encoded string. For example, if the browser uses Aladdin as the username and OpenSesame as the password, then the field's value is the base64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. Then the Authorization header will appear as: \u201cAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\u201d Example of CURL request: - curl -X GET \" https://switch.wirecard.com/mswitch-server/v1/info/version \" -H \"accept: application/json\" -H \"Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\" - curl -X GET \" https://switch.wirecard.com/mswitch-server/v1/info/version \" -H \"accept: application/json\" -u Aladdin:OpenSesame","title":"Authentication and security"},{"location":"auth/#test-environment","text":"Wirecard ePOS backend TEST environment is provided to API integrators for their development purposes. In case your credentials are valid for ePOS backend TEST environment, please refer to https://switch-test.wirecard.com/mswitch-server/ One can test the validity of credentials by calling: GET https://switch-test.wirecard.com/mswitch-server/v1/info/version","title":"Test Environment"},{"location":"card/","text":"","title":"Terminal management"},{"location":"cash/","text":"","title":"Cash"},{"location":"discounts/","text":"","title":"Discounts"},{"location":"glossary/","text":"","title":"Glossary"},{"location":"items/","text":"","title":"General"},{"location":"multitender/","text":"","title":"Multi-tender sale"},{"location":"sale/","text":"","title":"Getting started"},{"location":"start/","text":"Welcome to the Wirecard ePOS API Partner Documentation The Wirecard ePOS API is part of Wirecard's range of mobile Point of Sale (mPOS) products and solutions. For complete information about all of Wirecard's mPOS solutions, contact your Wirecard representative. The Wirecard ePOS API enables the integration point to enrich your system with functionality that expands the number of payment methods that merchants can accept from their consumers, including Visa, Mastercard, Alipay and WeChatPay. Cash can also be accepted and processed so that merchants can process all transactions through a single solution created with the help of the Wirecard ePOS API. Who is this for? Wirecard works with partners who use the Wirecard ePOS API to include in their existing systems payment acceptance functionality for merchants. This documentation is for these partners. Partners are typically companies that specialize in software application development. Merchants are the actual end-users of the payment acceptance app functionality. Partners typically create app functionality to support payment acceptance by merchants, and this functionality is usually a subset of a larger solution, so throughout this documentation we refer to the functionality that you create with the API as the payment acceptance, even though it may not be a standalone system. Tip If you are new to the payment industry there are a lot of terms to learn. So, the terms partner, merchant, user, payment acceptance app and many others are all defined in the Glossary to help you with this task. The Glossary also has definitions for the most common acronyms you find on this documentation site, such as SEPA, mPOS and others. How much is covered? Everything! Our goal is to provide all the information that our partners need to successfully create a payment acceptance system in the shortest possible time. So, we have introductory and overview information, architectural explanations, software setup information and detailed developer documentation, ranging from integration guides to comprehensive object class references. The Using This Documentation chapter shows you how to use each section of this documentation site. How technical is it? A partner team typically consists of a non-technical or semi-technical project manager and one or more developers who are technical. This documentation is for the whole team so the information here ranges from non-technical to very technical. What do I need to know? Project managers on the technical team do not require any specific skills. Developers should have these skills: understanding of REST API calls understanding of JSON objects","title":"Getting started"},{"location":"start/#welcome-to-the-wirecard-epos-api-partner-documentation","text":"The Wirecard ePOS API is part of Wirecard's range of mobile Point of Sale (mPOS) products and solutions. For complete information about all of Wirecard's mPOS solutions, contact your Wirecard representative. The Wirecard ePOS API enables the integration point to enrich your system with functionality that expands the number of payment methods that merchants can accept from their consumers, including Visa, Mastercard, Alipay and WeChatPay. Cash can also be accepted and processed so that merchants can process all transactions through a single solution created with the help of the Wirecard ePOS API.","title":"Welcome to the Wirecard ePOS API Partner Documentation"},{"location":"start/#who-is-this-for","text":"Wirecard works with partners who use the Wirecard ePOS API to include in their existing systems payment acceptance functionality for merchants. This documentation is for these partners. Partners are typically companies that specialize in software application development. Merchants are the actual end-users of the payment acceptance app functionality. Partners typically create app functionality to support payment acceptance by merchants, and this functionality is usually a subset of a larger solution, so throughout this documentation we refer to the functionality that you create with the API as the payment acceptance, even though it may not be a standalone system. Tip If you are new to the payment industry there are a lot of terms to learn. So, the terms partner, merchant, user, payment acceptance app and many others are all defined in the Glossary to help you with this task. The Glossary also has definitions for the most common acronyms you find on this documentation site, such as SEPA, mPOS and others.","title":"Who is this for?"},{"location":"start/#how-much-is-covered","text":"Everything! Our goal is to provide all the information that our partners need to successfully create a payment acceptance system in the shortest possible time. So, we have introductory and overview information, architectural explanations, software setup information and detailed developer documentation, ranging from integration guides to comprehensive object class references. The Using This Documentation chapter shows you how to use each section of this documentation site.","title":"How much is covered?"},{"location":"start/#how-technical-is-it","text":"A partner team typically consists of a non-technical or semi-technical project manager and one or more developers who are technical. This documentation is for the whole team so the information here ranges from non-technical to very technical.","title":"How technical is it?"},{"location":"start/#what-do-i-need-to-know","text":"Project managers on the technical team do not require any specific skills. Developers should have these skills: understanding of REST API calls understanding of JSON objects","title":"What do I need to know?"},{"location":"user/","text":"User management Purpose of this chapter is to describe how can merchant manage its own users. User account is required as the whole communication with ePOS system is done via particular user account. ePOS backend API calls used for managing user accounts are described below: 1. Create a new user POST /v1/users with the example body: { \"username\": \"john.doe\", \"email\": \"john.doe@example.com\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"merchant\": { \"id\": \"e5869bc0303b4dabbf1e593d619146dc\" }, \"password\": \"Password123!\", \"roles\": [ \"MERCHANT_ADMIN\" ], \"status\": \"ENABLED\", \"timeZone\": \"Europe/Berlin\" } User role defines what operations (API calls) are available to a particular user account. Wirecard ePOS backend provides following user roles: - Merchant Admin - see all merchant sales and can create new user accounts - Merchant Advanced User - see all merchant sales - Merchant User - see only own sales 2. List all user accounts GET /v1/users 3. Get a specific user account GET /v1/users/{userId}","title":"User management"},{"location":"user/#user-management","text":"Purpose of this chapter is to describe how can merchant manage its own users. User account is required as the whole communication with ePOS system is done via particular user account. ePOS backend API calls used for managing user accounts are described below:","title":"User management"},{"location":"user/#1-create-a-new-user","text":"POST /v1/users with the example body: { \"username\": \"john.doe\", \"email\": \"john.doe@example.com\", \"firstName\": \"John\", \"lastName\": \"Doe\", \"merchant\": { \"id\": \"e5869bc0303b4dabbf1e593d619146dc\" }, \"password\": \"Password123!\", \"roles\": [ \"MERCHANT_ADMIN\" ], \"status\": \"ENABLED\", \"timeZone\": \"Europe/Berlin\" } User role defines what operations (API calls) are available to a particular user account. Wirecard ePOS backend provides following user roles: - Merchant Admin - see all merchant sales and can create new user accounts - Merchant Advanced User - see all merchant sales - Merchant User - see only own sales","title":"1. Create a new user"},{"location":"user/#2-list-all-user-accounts","text":"GET /v1/users","title":"2. List all user accounts"},{"location":"user/#3-get-a-specific-user-account","text":"GET /v1/users/{userId}","title":"3. Get a specific user account"},{"location":"wechat/","text":"","title":"WeChat Pay"}]}